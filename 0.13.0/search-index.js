var searchIndex = JSON.parse('{\
"soa_derive_example":{"doc":"This crate is an example for the <code>soa_derive</code> crate …","t":"DDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMLLLLLMMMMMMMMMMMMMMMMLLLLMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Particle","ParticlePtr","ParticlePtrMut","ParticleRef","ParticleRefMut","ParticleSlice","ParticleSliceMut","ParticleVec","add","add","append","as_mut","as_mut","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_slice","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ref","as_ref","as_ref","as_ref","as_slice","as_slice","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","drop","eq","eq","eq","eq","eq","eq","eq","eq","first","first_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_iter","from_raw_parts","from_raw_parts","from_raw_parts_mut","get","get","get","get_mut","get_mut","get_unchecked","get_unchecked","get_unchecked","get_unchecked_mut","get_unchecked_mut","index","index","index","index_mut","index_mut","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_empty","is_null","is_null","iter","iter","iter","iter_mut","iter_mut","kind","kind","kind","kind","kind","kind","kind","kind","last","last_mut","len","len","len","mass","mass","mass","mass","mass","mass","mass","mass","name","name","name","name","name","name","name","name","new","offset","offset","pop","position","position","position","position","position","position","position","position","push","read","read","read_unaligned","read_unaligned","read_volatile","read_volatile","reborrow","reborrow","remove","reserve","reserve_exact","retain","shrink_to_fit","slice","slice_mut","sort","sort_by","sort_by_key","split_at","split_at_mut","split_first","split_first_mut","split_last","split_last_mut","split_off","sub","sub","swap","swap_remove","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_capacity","wrapping_add","wrapping_add","wrapping_offset","wrapping_offset","wrapping_sub","wrapping_sub","write","write_unaligned","write_volatile"],"q":["soa_derive_exampled":["A basic Particle type","An analog of a pointer to <code>Particle</code> with struct of array …","An analog of a mutable pointer to <code>Particle</code> with struct of …","A reference to a <code>Particle</code> with struct of array layout.","A mutable reference to a <code>Particle</code> with struct of array …","A slice of <code>Particle</code> inside a <code>ParticleVec</code> .","A mutable slice of <code>Particle</code> inside a <code>ParticleVec</code> .","An analog to <code>Vec&lt;Particle&gt;\\n</code> with Struct of Array (SoA) …","Similar to <code>*const T::add()</code>, with the same safety caveats.","Similar to <code>*mut T::add()</code>, with the same safety caveats.","Similar to <code> Vec&lt;Particle&gt; ::append()</code>.","Similar to <code>*mut T::as_mut()</code>, with the same safety caveats.","Create a <code>ParticleRefMut</code> from a mutably borrowed <code>Particle</code> .","Similar to <code> Vec&lt;Particle&gt; ::as_mut_ptr()</code>.","Convert a <code>ParticleRefMut</code> to a <code>ParticlePtrMut</code> ; <em>i.e.</em> do a …","Convert a <code>ParticlePtr</code> to a <code>ParticlePtrMut</code> ; <em>i.e.</em> do a …","Similar to <code>&amp;mut [Particle] ::as_mut_ptr()</code>.","Similar to <code> Vec&lt;Particle&gt; ::as_mut_slice()</code>.","Similar to <code> Vec&lt;Particle&gt; ::as_ptr()</code>.","Convert a <code>ParticleRef</code> to a <code>ParticlePtr</code> ; <em>i.e.</em> do a …","Convert a <code>ParticleRefMut</code> to a <code>ParticlePtr</code> ; <em>i.e.</em> do a …","Convert a <code>ParticlePtrMut</code> to a <code>ParticlePtr</code> ; <em>i.e.</em> do a …","Similar to <code>&amp; [Particle] ::as_ptr()</code>.","Similar to <code>&amp; [Particle] ::as_ptr()</code>.","Similar to <code>*const T::as_ref()</code>, with the same safety …","Similar to <code>*mut T::as_ref()</code>, with the same safety caveats.","Convert a <code>ParticleSliceMut</code> to a <code>ParticleSlice</code> in order to …","Create a <code>ParticleRef</code> from a borrowed <code>Particle</code> .","Similar to <code> Vec&lt;Particle&gt; ::as_slice()</code>.","Returns a non-mutable slice from this mutable slice.","","","","","","","","","","","","","","","","","Similar to <code> Vec&lt;Particle&gt; ::capacity()</code>, the capacity of …","Similar to <code> Vec&lt;Particle&gt; ::clear()</code>.","","","","","","","","","","","","","","","","","","Similar to <code>&amp; [Particle] ::first()</code>.","Similar to <code>&amp;mut [Particle] ::first_mut()</code>.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Similar to <code> Vec&lt;Particle&gt; ::from_raw_parts()</code>.","Similar to <code>std::slice::from_raw_parts()</code>.","Similar to <code>std::slice::from_raw_parts_mut()</code>.","Similar to <code> Vec&lt;Particle&gt; ::get&lt;I&gt;()</code>.","Similar to <code>&amp; [Particle] ::get()</code>.","Similar to <code>&amp; [Particle] ::get()</code>.","Similar to <code> Vec&lt;Particle&gt; ::get_mut&lt;I&gt;()</code>.","Similar to <code>&amp;mut [Particle] ::get_mut()</code>.","Similar to <code> Vec&lt;Particle&gt; ::get_unchecked&lt;I&gt;()</code>.","Similar to <code>&amp; [Particle] ::get_unchecked()</code>.","Similar to <code>&amp; [Particle] ::get_unchecked()</code>.","Similar to <code> Vec&lt;Particle&gt; ::get_unchecked_mut&lt;I&gt;()</code>.","Similar to <code>&amp;mut [Particle] ::get_unchecked_mut()</code>.","Similar to <code> Vec&lt;Particle&gt; ::index&lt;I&gt;()</code>.","Similar to the <code>std::ops::Index</code> trait for <code>&amp; [Particle] </code> . …","Similar to the <code>std::ops::Index</code> trait for <code>&amp; [Particle] </code> . …","Similar to <code> Vec&lt;Particle&gt; ::index_mut&lt;I&gt;()</code>.","Similar to the <code>std::ops::IndexMut</code> trait for …","Similar to <code> Vec&lt;Particle&gt; ::insert()</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Get an iterator over the <code>ParticleRef</code> in this slice.","","","Get a mutable iterator over the <code>ParticleRefMut</code> in this …","Similar to <code> Vec&lt;Particle&gt; ::is_empty()</code>, all the fields …","Similar to <code>&amp; [Particle] ::is_empty()</code>, the length of all …","Similar to <code>&amp; [Particle] ::is_empty()</code>, the length of all …","Similar to <code>*const T::is_null()</code>.","Similar to <code>*mut T::is_null()</code>.","Get an iterator over the <code>ParticleRef</code> in this vector","Get an iterator over the <code>ParticleRef</code> in this slice.","Get an iterator over the <code>ParticleRef</code> in this vector","Get a mutable iterator over the <code>ParticleRefMut</code> in this …","Get a mutable iterator over the <code>ParticleRefMut</code> in this …","a vector of <code>kind</code> from a <code>Particle</code>","reference to the <code>kind</code> field of a single <code>Particle</code> inside a …","reference to the <code>kind</code> field of a single <code>Particle</code> inside a …","pointer to the <code>kind</code> field of a single <code>Particle</code> inside a …","pointer to the <code>kind</code> field of a single <code>Particle</code> inside a …","slice of <code>kind</code> inside a <code>ParticleVec</code>","slice of <code>kind</code> inside a <code>ParticleVec</code>","Kind of the particle","Similar to <code>&amp; [Particle] ::last()</code>.","Similar to <code>&amp;mut [Particle] ::last_mut()</code>.","Similar to <code> Vec&lt;Particle&gt; ::len()</code>, all the fields should …","Similar to <code>&amp; [Particle] ::len()</code>, the length of all fields …","Similar to <code>&amp; [Particle] ::len()</code>, the length of all fields …","a vector of <code>mass</code> from a <code>Particle</code>","reference to the <code>mass</code> field of a single <code>Particle</code> inside a …","reference to the <code>mass</code> field of a single <code>Particle</code> inside a …","pointer to the <code>mass</code> field of a single <code>Particle</code> inside a …","pointer to the <code>mass</code> field of a single <code>Particle</code> inside a …","slice of <code>mass</code> inside a <code>ParticleVec</code>","slice of <code>mass</code> inside a <code>ParticleVec</code>","Mass of the particle","a vector of <code>name</code> from a <code>Particle</code>","reference to the <code>name</code> field of a single <code>Particle</code> inside a …","reference to the <code>name</code> field of a single <code>Particle</code> inside a …","pointer to the <code>name</code> field of a single <code>Particle</code> inside a …","pointer to the <code>name</code> field of a single <code>Particle</code> inside a …","slice of <code>name</code> inside a <code>ParticleVec</code>","slice of <code>name</code> inside a <code>ParticleVec</code>","Name of the particle","Similar to <code> Vec&lt;Particle&gt; ::new()</code>","Similar to <code>*const T::offset()</code>, with the same safety …","Similar to <code>*mut T::offset()</code>, with the same safety caveats.","Similar to <code> Vec&lt;Particle&gt; ::pop()</code>.","a vector of <code>position</code> from a <code>Particle</code>","reference to the <code>position</code> field of a single <code>Particle</code> …","reference to the <code>position</code> field of a single <code>Particle</code> …","pointer to the <code>position</code> field of a single <code>Particle</code> inside a","pointer to the <code>position</code> field of a single <code>Particle</code> inside a","slice of <code>position</code> inside a <code>ParticleVec</code>","slice of <code>position</code> inside a <code>ParticleVec</code>","Position of the particle","Similar to <code> Vec&lt;Particle&gt; ::push()</code>.","Similar to <code>*const T::read()</code>, with the same safety caveats.","Similar to <code>*mut T::read()</code>, with the same safety caveats.","Similar to <code>*const T::read_unaligned()</code>, with the same …","Similar to <code>*mut T::read_unaligned()</code>, with the same safety …","Similar to <code>*const T::read_volatile()</code>, with the same safety …","Similar to <code>*mut T::read_volatile()</code>, with the same safety …","Reborrows the slices in a narrower lifetime","Reborrows the slices in a narrower lifetime","Similar to <code> Vec&lt;Particle&gt; ::remove()</code>.","Similar to <code> Vec&lt;Particle&gt; ::reserve()</code>, reserving the same …","Similar to <code> Vec&lt;Particle&gt; ::reserve_exact()</code> reserving the …","Similar to <code> Vec&lt;Particle&gt; ::retain()</code>.","Similar to <code> Vec&lt;Particle&gt; ::shrink_to_fit()</code> shrinking all …","Create a slice of this vector matching the given <code>range</code>. …","Create a mutable slice of this vector matching the given …","Similar to <code>&amp;mut [Particle] ::sort()</code>.","Similar to <code>&amp;mut [Particle] ::sort_by()</code>.","Similar to <code>&amp;mut [Particle] ::sort_by_key()</code>.","Similar to <code>&amp; [Particle] ::split_at()</code>.","Similar to <code>&amp;mut [Particle] ::split_at_mut()</code>.","Similar to <code>&amp; [Particle] ::split_first()</code>.","Similar to <code>&amp;mut [Particle] ::split_first_mut()</code>.","Similar to <code>&amp; [Particle] ::split_last()</code>.","Similar to <code>&amp;mut [Particle] ::last_mut()</code>.","Similar to <code> Vec&lt;Particle&gt; ::split_off()</code>.","Similar to <code>*const T::sub()</code>, with the same safety caveats.","Similar to <code>*mut T::sub()</code>, with the same safety caveats.","Similar to <code>&amp;mut [Particle] ::swap()</code>.","Similar to <code> Vec&lt;Particle&gt; ::swap_remove()</code>.","","Convert a reference to <code>Particle</code> into an owned value. This …","Convert a mutable reference to <code>Particle</code> into an owned …","","","","Similar to <code> Vec&lt;Particle&gt; ::truncate()</code> truncating all …","","","","","","","","","","","","","","","","","","","","","","","","","Similar to <code> Vec&lt;Particle&gt; ::with_capacity()</code>, initializing …","Similar to <code>*const T::wrapping_add()</code>.","Similar to <code>*mut T::wrapping_add()</code>, with the same safety …","Similar to <code>*const T::offset()</code>.","Similar to <code>*mut T::wrapping_offset()</code>","Similar to <code>*const T::wrapping_sub()</code>.","Similar to <code>*mut T::wrapping_sub()</code>, with the same safety …","Similar to <code>*mut T::write()</code>, with the same safety caveats.","Similar to <code>*mut T::write_unaligned()</code>, with the same safety …","Similar to <code>*mut T::write_volatile()</code>, with the same safety …"],"i":[0,0,0,0,0,0,0,0,1,3,4,3,7,4,5,1,8,4,4,9,5,3,10,8,1,3,8,7,4,8,4,9,5,1,3,10,8,7,4,9,5,1,3,10,8,7,4,4,9,1,3,10,9,1,3,10,4,4,9,5,1,3,10,8,7,10,8,4,9,5,1,3,10,8,7,4,9,5,1,3,10,8,7,4,4,10,8,4,10,8,4,8,4,10,8,4,8,4,10,8,4,8,4,4,9,5,1,3,10,8,7,4,4,10,10,10,8,8,4,10,8,1,3,4,10,8,4,8,4,9,5,1,3,10,8,7,10,8,4,10,8,4,9,5,1,3,10,8,7,4,9,5,1,3,10,8,7,4,1,3,4,4,9,5,1,3,10,8,7,4,1,3,1,3,1,3,10,8,4,4,4,4,4,4,4,8,8,8,10,8,10,8,10,8,4,1,3,8,4,9,9,5,1,3,10,4,4,9,5,1,3,10,8,7,4,9,5,1,3,10,8,7,4,9,5,1,3,10,8,7,4,1,3,1,3,1,3,3,3,3],"f":[0,0,0,0,0,0,0,0,[[1,2],1],[[3,2],3],[[4,4]],[3,[[6,[5]]]],[7,5],[4,3],[5,3],[1,3],[8,3],[4,8],[4,1],[9,1],[5,1],[3,1],[10,1],[8,1],[1,[[6,[9]]]],[3,[[6,[9]]]],[8,10],[7,9],[4,10],[8,10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,2],[4],[9,9],[1,1],[3,3],[10,10],[[]],[[]],[[]],[[]],[4],[[4,4],11],[[9,9],11],[[5,5],11],[[1,1],11],[[3,3],11],[[10,10],11],[[8,8],11],[[7,7],11],[10,[[6,[9]]]],[8,[[6,[5]]]],[[4,12],13],[[9,12],13],[[5,12],13],[[1,12],13],[[3,12],13],[[10,12],13],[[8,12],13],[[7,12],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,4],[[3,2,2],4],[[1,2],10],[[3,2],8],[4,6],[10,6],[8,6],[4,6],[8,6],[4],[10],[8],[4],[8],[4],[10],[8],[4],[8],[[4,2,7]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4],[4],[10],0,[10],[8],0,[4,11],[10,11],[8,11],[1,11],[3,11],0,0,0,0,0,0,0,0,0,0,0,0,0,[10,[[6,[9]]]],[8,[[6,[5]]]],[4,2],[10,2],[8,2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],4],[[1,15],1],[[3,15],3],[4,[[6,[7]]]],0,0,0,0,0,0,0,0,[[4,7]],[1,7],[3,7],[1,7],[3,7],[1,7],[3,7],[10,10],[8,8],[[4,2],7],[[4,2]],[[4,2]],[4],[4],[[4,[16,[2]]],10],[[4,[16,[2]]],8],[8],[8],[8],[[10,2]],[[8,2]],[10,6],[8,6],[10,6],[8,6],[[4,2],4],[[1,2],1],[[3,2],3],[[8,2,2]],[[4,2],7],[[]],[9,7],[5,7],[[]],[[]],[[]],[[4,2]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[2,4],[[1,2],1],[[3,2],3],[[1,15],1],[[3,15],3],[[1,2],1],[[3,2],3],[[3,7]],[[3,7]],[[3,7]]],"p":[[3,"ParticlePtr"],[15,"usize"],[3,"ParticlePtrMut"],[3,"ParticleVec"],[3,"ParticleRefMut"],[4,"Option"],[3,"Particle"],[3,"ParticleSliceMut"],[3,"ParticleRef"],[3,"ParticleSlice"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"IntoIterator"],[15,"isize"],[3,"Range"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
