var searchIndex = JSON.parse('{\
"soa_derive_example":{"doc":"This crate is an example for the [`soa_derive`] crate…","i":[[3,"Particle","soa_derive_example","A basic Particle type",null,null],[12,"mass","","Mass of the particle",0,null],[12,"position","","Position of the particle",0,null],[12,"kind","","Kind of the particle",0,null],[12,"name","","Name of the particle",0,null],[3,"ParticleVec","","An analog to `Vec<Particle> ` with Struct of Array (SoA)…",null,null],[12,"mass","","A vector of `mass` from a `Particle`",1,null],[12,"position","","A vector of `position` from a `Particle`",1,null],[12,"kind","","A vector of `kind` from a `Particle`",1,null],[12,"name","","A vector of `name` from a `Particle`",1,null],[3,"ParticleRef","","A reference to a `Particle`  with struct of array layout.",null,null],[12,"mass","","A reference to a `mass` from a `ParticleVec`",2,null],[12,"position","","A reference to a `position` from a `ParticleVec`",2,null],[12,"kind","","A reference to a `kind` from a `ParticleVec`",2,null],[12,"name","","A reference to a `name` from a `ParticleVec`",2,null],[3,"ParticleRefMut","","A mutable reference to a `Particle` with struct of array…",null,null],[12,"mass","","A mutable reference to a `mass` from a `ParticleVec`",3,null],[12,"position","","A mutable reference to a `position` from a `ParticleVec`",3,null],[12,"kind","","A mutable reference to a `kind` from a `ParticleVec`",3,null],[12,"name","","A mutable reference to a `name` from a `ParticleVec`",3,null],[3,"ParticlePtr","","An analog of a pointer to `Particle` with struct of array…",null,null],[12,"mass","","A pointer to a `mass` from a `ParticleVec`",4,null],[12,"position","","A pointer to a `position` from a `ParticleVec`",4,null],[12,"kind","","A pointer to a `kind` from a `ParticleVec`",4,null],[12,"name","","A pointer to a `name` from a `ParticleVec`",4,null],[3,"ParticlePtrMut","","An analog of a mutable pointer to `Particle` with struct…",null,null],[12,"mass","","A mutable pointer to a `mass` from a `ParticleVec`",5,null],[12,"position","","A mutable pointer to a `position` from a `ParticleVec`",5,null],[12,"kind","","A mutable pointer to a `kind` from a `ParticleVec`",5,null],[12,"name","","A mutable pointer to a `name` from a `ParticleVec`",5,null],[3,"ParticleSlice","","A slice of `Particle`  inside a `ParticleVec`  .",null,null],[12,"mass","","A slice of `mass` from a `ParticleVec`",6,null],[12,"position","","A slice of `position` from a `ParticleVec`",6,null],[12,"kind","","A slice of `kind` from a `ParticleVec`",6,null],[12,"name","","A slice of `name` from a `ParticleVec`",6,null],[3,"ParticleSliceMut","","A mutable slice of `Particle`  inside a `ParticleVec`  .",null,null],[12,"mass","","A mutable slice of `mass` from a `ParticleVec`",7,null],[12,"position","","A mutable slice of `position` from a `ParticleVec`",7,null],[12,"kind","","A mutable slice of `kind` from a `ParticleVec`",7,null],[12,"name","","A mutable slice of `name` from a `ParticleVec`",7,null],[11,"iter","","Get an iterator over the `ParticleRef`  in this vector",1,[[],["iter",3]]],[11,"iter","","Get an iterator over the `ParticleRef`  in this slice.",6,[[],["iter",3]]],[11,"iter_mut","","Get a mutable iterator over the `ParticleRefMut` in this…",1,[[],["itermut",3]]],[11,"iter","","Get an iterator over the `ParticleRef`  in this vector",7,[[],["iter",3]]],[11,"iter_mut","","Get a mutable iterator over the `ParticleRefMut` in this…",7,[[],["itermut",3]]],[11,"new","","Similar to ` Vec<Particle>  ::new()`",1,[[],["particlevec",3]]],[11,"with_capacity","","Similar to ` Vec<Particle> ::with_capacity()`,…",1,[[],["particlevec",3]]],[11,"capacity","","Similar to ` Vec<Particle> ::capacity()`, the capacity of…",1,[[]]],[11,"reserve","","Similar to ` Vec<Particle> ::reserve()`, reserving the…",1,[[]]],[11,"reserve_exact","","Similar to ` Vec<Particle> ::reserve_exact()` reserving…",1,[[]]],[11,"shrink_to_fit","","Similar to ` Vec<Particle> ::shrink_to_fit()` shrinking…",1,[[]]],[11,"truncate","","Similar to ` Vec<Particle> ::truncate()` truncating all…",1,[[]]],[11,"push","","Similar to ` Vec<Particle>  ::push()`.",1,[[["particle",3]]]],[11,"len","","Similar to ` Vec<Particle> ::len()`, all the fields should…",1,[[]]],[11,"is_empty","","Similar to ` Vec<Particle> ::is_empty()`, all the fields…",1,[[]]],[11,"swap_remove","","Similar to ` Vec<Particle>  ::swap_remove()`.",1,[[],["particle",3]]],[11,"insert","","Similar to ` Vec<Particle>  ::insert()`.",1,[[["particle",3]]]],[11,"remove","","Similar to ` Vec<Particle>  ::remove()`.",1,[[],["particle",3]]],[11,"pop","","Similar to ` Vec<Particle>  ::pop()`.",1,[[],[["particle",3],["option",4]]]],[11,"append","","Similar to ` Vec<Particle>  ::append()`.",1,[[["particlevec",3]]]],[11,"clear","","Similar to ` Vec<Particle>  ::clear()`.",1,[[]]],[11,"split_off","","Similar to ` Vec<Particle>  ::split_off()`.",1,[[],["particlevec",3]]],[11,"as_slice","","Similar to ` Vec<Particle>  ::as_slice()`.",1,[[],["particleslice",3]]],[11,"as_mut_slice","","Similar to ` Vec<Particle>  ::as_mut_slice()`.",1,[[],["particleslicemut",3]]],[11,"slice","","Create a slice of this vector matching the given `range`.…",1,[[["range",3]],["particleslice",3]]],[11,"slice_mut","","Create a mutable slice of this vector matching the given…",1,[[["range",3]],["particleslicemut",3]]],[11,"retain","","Similar to ` Vec<Particle>  ::retain()`.",1,[[]]],[11,"get","","Similar to ` Vec<Particle>  ::get<I>()`.",1,[[],["option",4]]],[11,"get_unchecked","","Similar to ` Vec<Particle>  ::get_unchecked<I>()`.",1,[[]]],[11,"index","","Similar to ` Vec<Particle>  ::index<I>()`.",1,[[]]],[11,"get_mut","","Similar to ` Vec<Particle>  ::get_mut<I>()`.",1,[[],["option",4]]],[11,"get_unchecked_mut","","Similar to ` Vec<Particle>  ::get_unchecked_mut<I>()`.",1,[[]]],[11,"index_mut","","Similar to ` Vec<Particle>  ::index_mut<I>()`.",1,[[]]],[11,"as_ptr","","Similar to ` Vec<Particle>  ::as_ptr()`.",1,[[],["particleptr",3]]],[11,"as_mut_ptr","","Similar to ` Vec<Particle>  ::as_mut_ptr()`.",1,[[],["particleptrmut",3]]],[11,"from_raw_parts","","Similar to ` Vec<Particle>  ::from_raw_parts()`.",1,[[["particleptrmut",3]],["particlevec",3]]],[11,"as_ref","","Create a `ParticleRef`  from a borrowed `Particle`  .",0,[[],["particleref",3]]],[11,"as_mut","","Create a `ParticleRefMut` from a mutably borrowed…",0,[[],["particlerefmut",3]]],[11,"as_mut_ptr","","Convert a `ParticlePtr` to a `ParticlePtrMut` ; i.e. do a…",4,[[],["particleptrmut",3]]],[11,"is_null","","Similar to `*const T::is_null()`.",4,[[]]],[11,"as_ref","","Similar to `*const T::as_ref()`, with the same safety…",4,[[],[["option",4],["particleref",3]]]],[11,"offset","","Similar to `*const T::offset()`, with the same safety…",4,[[],["particleptr",3]]],[11,"wrapping_offset","","Similar to `*const T::offset()`.",4,[[],["particleptr",3]]],[11,"add","","Similar to `*const T::add()`, with the same safety caveats.",4,[[],["particleptr",3]]],[11,"sub","","Similar to `*const T::sub()`, with the same safety caveats.",4,[[],["particleptr",3]]],[11,"wrapping_add","","Similar to `*const T::wrapping_add()`.",4,[[],["particleptr",3]]],[11,"wrapping_sub","","Similar to `*const T::wrapping_sub()`.",4,[[],["particleptr",3]]],[11,"read","","Similar to `*const T::read()`, with the same safety caveats.",4,[[],["particle",3]]],[11,"read_volatile","","Similar to `*const T::read_volatile()`, with the same…",4,[[],["particle",3]]],[11,"read_unaligned","","Similar to `*const T::read_unaligned()`, with the same…",4,[[],["particle",3]]],[11,"as_ptr","","Convert a `ParticlePtrMut` to a `ParticlePtr` ; i.e. do a…",5,[[],["particleptr",3]]],[11,"is_null","","Similar to `*mut T::is_null()`.",5,[[]]],[11,"as_ref","","Similar to `*mut T::as_ref()`, with the same safety caveats.",5,[[],[["option",4],["particleref",3]]]],[11,"as_mut","","Similar to `*mut T::as_mut()`, with the same safety caveats.",5,[[],[["particlerefmut",3],["option",4]]]],[11,"offset","","Similar to `*mut T::offset()`, with the same safety caveats.",5,[[],["particleptrmut",3]]],[11,"wrapping_offset","","Similar to `*mut T::wrapping_offset()`",5,[[],["particleptrmut",3]]],[11,"add","","Similar to `*mut T::add()`, with the same safety caveats.",5,[[],["particleptrmut",3]]],[11,"sub","","Similar to `*mut T::sub()`, with the same safety caveats.",5,[[],["particleptrmut",3]]],[11,"wrapping_add","","Similar to `*mut T::wrapping_add()`, with the same safety…",5,[[],["particleptrmut",3]]],[11,"wrapping_sub","","Similar to `*mut T::wrapping_sub()`, with the same safety…",5,[[],["particleptrmut",3]]],[11,"read","","Similar to `*mut T::read()`, with the same safety caveats.",5,[[],["particle",3]]],[11,"read_volatile","","Similar to `*mut T::read_volatile()`, with the same safety…",5,[[],["particle",3]]],[11,"read_unaligned","","Similar to `*mut T::read_unaligned()`, with the same…",5,[[],["particle",3]]],[11,"write","","Similar to `*mut T::write()`, with the same safety caveats.",5,[[["particle",3]]]],[11,"write_volatile","","Similar to `*mut T::write_volatile()`, with the same…",5,[[["particle",3]]]],[11,"write_unaligned","","Similar to `*mut T::write_unaligned()`, with the same…",5,[[["particle",3]]]],[11,"as_ptr","","Convert a `ParticleRef` to a `ParticlePtr` ; i.e. do a `&T…",2,[[],["particleptr",3]]],[11,"as_ptr","","Convert a `ParticleRefMut` to a `ParticlePtr` ; i.e. do a…",3,[[],["particleptr",3]]],[11,"as_mut_ptr","","Convert a `ParticleRefMut` to a `ParticlePtrMut` ; i.e. do…",3,[[],["particleptrmut",3]]],[11,"len","","Similar to ` [Particle] ::len()`, the length of all fields…",6,[[]]],[11,"is_empty","","Similar to ` [Particle] ::is_empty()`, the length of all…",6,[[]]],[11,"first","","Similar to ` [Particle]  ::first()`.",6,[[],[["option",4],["particleref",3]]]],[11,"split_first","","Similar to ` [Particle]  ::split_first()`.",6,[[],["option",4]]],[11,"last","","Similar to ` [Particle]  ::last()`.",6,[[],[["option",4],["particleref",3]]]],[11,"split_last","","Similar to ` [Particle]  ::split_last()`.",6,[[],["option",4]]],[11,"split_at","","Similar to ` [Particle]  ::split_at()`.",6,[[]]],[11,"get","","Similar to ` [Particle]  ::get()`.",6,[[],["option",4]]],[11,"get_unchecked","","Similar to ` [Particle]  ::get_unchecked()`.",6,[[]]],[11,"index","","Similar to `std::ops::Index` trait on [Particle] . This is…",6,[[]]],[11,"reborrow","","Reborrows the slices in a narrower lifetime",6,[[],["particleslice",3]]],[11,"as_ptr","","Similar to ` [Particle]  ::as_ptr()`.",6,[[],["particleptr",3]]],[11,"from_raw_parts","","Similar to `std::slice::from_raw_parts()`.",6,[[["particleptr",3]],["particleslice",3]]],[11,"as_ref","","Convert a `ParticleSliceMut` to a `ParticleSlice` in order…",7,[[],["particleslice",3]]],[11,"len","","Similar to ` [Particle] ::len()`, the length of all fields…",7,[[]]],[11,"is_empty","","Similar to ` [Particle] ::is_empty()`, the length of all…",7,[[]]],[11,"first_mut","","Similar to ` [Particle]  ::first_mut()`.",7,[[],[["particlerefmut",3],["option",4]]]],[11,"split_first_mut","","Similar to ` [Particle]  ::split_first_mut()`.",7,[[],["option",4]]],[11,"last_mut","","Similar to ` [Particle]  ::last_mut()`.",7,[[],[["particlerefmut",3],["option",4]]]],[11,"split_last_mut","","Similar to ` [Particle]  ::last_mut()`.",7,[[],["option",4]]],[11,"split_at_mut","","Similar to ` [Particle]  ::split_at_mut()`.",7,[[]]],[11,"swap","","Similar to ` [Particle]  ::swap()`.",7,[[]]],[11,"get","","Similar to ` [Particle]  ::get()`.",7,[[],["option",4]]],[11,"get_unchecked","","Similar to ` [Particle]  ::get_unchecked()`.",7,[[]]],[11,"index","","Similar to `std::ops::Index` trait on [Particle] . This is…",7,[[]]],[11,"get_mut","","Similar to ` [Particle]  ::get_mut()`.",7,[[],["option",4]]],[11,"get_unchecked_mut","","Similar to ` [Particle]  ::get_unchecked_mut()`.",7,[[]]],[11,"index_mut","","Similar to `std::ops::IndexMut` trait on [Particle] . This…",7,[[]]],[11,"as_slice","","Returns a non-mutable slice from this mutable slice.",7,[[],["particleslice",3]]],[11,"reborrow","","Reborrows the slices in a narrower lifetime",7,[[],["particleslicemut",3]]],[11,"as_ptr","","Similar to ` [Particle]  ::as_ptr()`.",7,[[],["particleptr",3]]],[11,"as_mut_ptr","","Similar to ` [Particle]  ::as_mut_ptr()`.",7,[[],["particleptrmut",3]]],[11,"from_raw_parts_mut","","Similar to `std::slice::from_raw_parts_mut()`.",7,[[["particleptrmut",3]],["particleslicemut",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"into_iter","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"into_iter","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"into_iter","","",6,[[]]],[11,"into_iter","","",7,[[]]],[11,"clone","","",2,[[],["particleref",3]]],[11,"clone","","",4,[[],["particleptr",3]]],[11,"clone","","",5,[[],["particleptrmut",3]]],[11,"clone","","",6,[[],["particleslice",3]]],[11,"eq","","",0,[[["particle",3]]]],[11,"ne","","",0,[[["particle",3]]]],[11,"eq","","",1,[[["particlevec",3]]]],[11,"ne","","",1,[[["particlevec",3]]]],[11,"eq","","",2,[[["particleref",3]]]],[11,"ne","","",2,[[["particleref",3]]]],[11,"eq","","",3,[[["particlerefmut",3]]]],[11,"ne","","",3,[[["particlerefmut",3]]]],[11,"eq","","",4,[[["particleptr",3]]]],[11,"ne","","",4,[[["particleptr",3]]]],[11,"eq","","",5,[[["particleptrmut",3]]]],[11,"ne","","",5,[[["particleptrmut",3]]]],[11,"eq","","",6,[[["particleslice",3]]]],[11,"ne","","",6,[[["particleslice",3]]]],[11,"eq","","",7,[[["particleslicemut",3]]]],[11,"ne","","",7,[[["particleslicemut",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"from_iter","","",1,[[["intoiterator",8]]]]],"p":[[3,"Particle"],[3,"ParticleVec"],[3,"ParticleRef"],[3,"ParticleRefMut"],[3,"ParticlePtr"],[3,"ParticlePtrMut"],[3,"ParticleSlice"],[3,"ParticleSliceMut"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);