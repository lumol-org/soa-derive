searchState.loadedDescShard("soa_derive_example", 0, "This crate is an example for the <code>soa_derive</code> crate …\nA basic Particle type\nIterator over <code>Particle</code>\nMutable iterator over <code>Particle</code>\nAn analog of a pointer to <code>Particle</code> with struct of array …\nAn analog of a mutable pointer to <code>Particle</code> with struct of …\nA reference to a <code>Particle</code> with struct of array layout.\nA mutable reference to a <code>Particle</code> with struct of array …\nA slice of <code>Particle</code> inside a <code>ParticleVec</code> .\nA mutable slice of <code>Particle</code> inside a <code>ParticleVec</code> .\nAn analog to <code>Vec&lt;Particle&gt; </code> with Struct of Array (SoA) …\nSimilar to <code>*const T::add()</code>, with the same safety caveats.\nSimilar to <code>*mut T::add()</code>, with the same safety caveats.\nSimilar to <code> Vec&lt;Particle&gt;  ::append()</code>.\nSimilar to <code>*mut T::as_mut()</code>, with the same safety caveats.\nCreate a <code>ParticleRefMut</code> from a mutably borrowed <code>Particle</code> .\nSimilar to <code> Vec&lt;Particle&gt;  ::as_mut_ptr()</code>.\nConvert a <code>ParticleRefMut</code> to a <code>ParticlePtrMut</code> ; <em>i.e.</em> do a …\nConvert a <code>ParticlePtr</code> to a <code>ParticlePtrMut</code> ; <em>i.e.</em> do a …\nSimilar to <code>&amp;mut [Particle]  ::as_mut_ptr()</code>.\nSimilar to <code> Vec&lt;Particle&gt;  ::as_mut_slice()</code>.\nSimilar to <code> Vec&lt;Particle&gt;  ::as_ptr()</code>.\nConvert a <code>ParticleRef</code> to a <code>ParticlePtr</code> ; <em>i.e.</em> do a …\nConvert a <code>ParticleRefMut</code> to a <code>ParticlePtr</code> ; <em>i.e.</em> do a …\nConvert a <code>ParticlePtrMut</code> to a <code>ParticlePtr</code> ; <em>i.e.</em> do a …\nSimilar to <code>&amp; [Particle]  ::as_ptr()</code>.\nSimilar to <code>&amp; [Particle]  ::as_ptr()</code>.\nSimilar to <code>*const T::as_ref()</code>, with the same safety …\nSimilar to <code>*mut T::as_ref()</code>, with the same safety caveats.\nConvert a <code>ParticleSliceMut</code> to a <code>ParticleSlice</code> in order to …\nCreate a <code>ParticleRef</code> from a borrowed <code>Particle</code> .\nSimilar to <code> Vec&lt;Particle&gt;  ::as_slice()</code>.\nReturns a non-mutable slice from this mutable slice.\nSimilar to <code> Vec&lt;Particle&gt;  ::capacity()</code>, the capacity of …\nSimilar to <code> Vec&lt;Particle&gt;  ::clear()</code>.\nSimilar to <code>&amp; [Particle]  ::first()</code>.\nSimilar to <code>&amp;mut [Particle]  ::first_mut()</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSimilar to <code> Vec&lt;Particle&gt;  ::from_raw_parts()</code>.\nSimilar to <code>std::slice::from_raw_parts()</code>.\nSimilar to <code>std::slice::from_raw_parts_mut()</code>.\nSimilar to <code> Vec&lt;Particle&gt;  ::get&lt;I&gt;()</code>.\nSimilar to <code>&amp; [Particle]  ::get()</code>.\nSimilar to <code>&amp; [Particle]  ::get()</code>.\nSimilar to <code> Vec&lt;Particle&gt;  ::get_mut&lt;I&gt;()</code>.\nSimilar to <code>&amp;mut [Particle]  ::get_mut()</code>.\nSimilar to <code> Vec&lt;Particle&gt;  ::get_unchecked&lt;I&gt;()</code>.\nSimilar to <code>&amp; [Particle]  ::get_unchecked()</code>.\nSimilar to <code>&amp; [Particle]  ::get_unchecked()</code>.\nSimilar to <code> Vec&lt;Particle&gt;  ::get_unchecked_mut&lt;I&gt;()</code>.\nSimilar to <code>&amp;mut [Particle]  ::get_unchecked_mut()</code>.\nSimilar to <code> Vec&lt;Particle&gt;  ::index&lt;I&gt;()</code>.\nSimilar to the <code>std::ops::Index</code> trait for <code>&amp; [Particle] </code> . …\nSimilar to the <code>std::ops::Index</code> trait for <code>&amp; [Particle] </code> . …\nSimilar to <code> Vec&lt;Particle&gt;  ::index_mut&lt;I&gt;()</code>.\nSimilar to the <code>std::ops::IndexMut</code> trait for …\nSimilar to <code> Vec&lt;Particle&gt;  ::insert()</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet an iterator over the <code>ParticleRef</code> in this slice.\nGet a mutable iterator over the <code>ParticleRefMut</code> in this …\nSimilar to <code> Vec&lt;Particle&gt;  ::is_empty()</code>, all the fields …\nSimilar to <code>&amp; [Particle]  ::is_empty()</code>, the length of all …\nSimilar to <code>&amp; [Particle]  ::is_empty()</code>, the length of all …\nSimilar to <code>*const T::is_null()</code>.\nSimilar to <code>*mut T::is_null()</code>.\nGet an iterator over the <code>ParticleRef</code> in this vector\nGet an iterator over the <code>ParticleRef</code> in this slice.\nGet an iterator over the <code>ParticleRef</code> in this vector\nGet a mutable iterator over the <code>ParticleRefMut</code> in this …\nGet a mutable iterator over the <code>ParticleRefMut</code> in this …\na vector of <code>kind</code> from a <code>Particle</code>\nreference to the <code>kind</code> field of a single <code>Particle</code> inside a …\nreference to the <code>kind</code> field of a single <code>Particle</code> inside a …\npointer to the <code>kind</code> field of a single <code>Particle</code> inside a …\npointer to the <code>kind</code> field of a single <code>Particle</code> inside a …\nslice of <code>kind</code> inside a <code>ParticleVec</code>\nslice of <code>kind</code> inside a <code>ParticleVec</code>\nKind of the particle\nSimilar to <code>&amp; [Particle]  ::last()</code>.\nSimilar to <code>&amp;mut [Particle]  ::last_mut()</code>.\nSimilar to <code> Vec&lt;Particle&gt;  ::len()</code>, all the fields should …\nSimilar to <code>&amp; [Particle]  ::len()</code>, the length of all fields …\nSimilar to <code>&amp; [Particle]  ::len()</code>, the length of all fields …\na vector of <code>mass</code> from a <code>Particle</code>\nreference to the <code>mass</code> field of a single <code>Particle</code> inside a …\nreference to the <code>mass</code> field of a single <code>Particle</code> inside a …\npointer to the <code>mass</code> field of a single <code>Particle</code> inside a …\npointer to the <code>mass</code> field of a single <code>Particle</code> inside a …\nslice of <code>mass</code> inside a <code>ParticleVec</code>\nslice of <code>mass</code> inside a <code>ParticleVec</code>\nMass of the particle\na vector of <code>name</code> from a <code>Particle</code>\nreference to the <code>name</code> field of a single <code>Particle</code> inside a …\nreference to the <code>name</code> field of a single <code>Particle</code> inside a …\npointer to the <code>name</code> field of a single <code>Particle</code> inside a …\npointer to the <code>name</code> field of a single <code>Particle</code> inside a …\nslice of <code>name</code> inside a <code>ParticleVec</code>\nslice of <code>name</code> inside a <code>ParticleVec</code>\nName of the particle\nSimilar to <code> Vec&lt;Particle&gt;  ::new()</code>\nSimilar to <code>*const T::offset()</code>, with the same safety …\nSimilar to <code>*mut T::offset()</code>, with the same safety caveats.\nSimilar to <code> Vec&lt;Particle&gt;  ::pop()</code>.\na vector of <code>position</code> from a <code>Particle</code>\nreference to the <code>position</code> field of a single <code>Particle</code> …\nreference to the <code>position</code> field of a single <code>Particle</code> …\npointer to the <code>position</code> field of a single <code>Particle</code> inside a\npointer to the <code>position</code> field of a single <code>Particle</code> inside a\nslice of <code>position</code> inside a <code>ParticleVec</code>\nslice of <code>position</code> inside a <code>ParticleVec</code>\nPosition of the particle\nSimilar to <code> Vec&lt;Particle&gt;  ::push()</code>.\nSimilar to <code>*const T::read()</code>, with the same safety caveats.\nSimilar to <code>*mut T::read()</code>, with the same safety caveats.\nSimilar to <code>*const T::read_unaligned()</code>, with the same …\nSimilar to <code>*mut T::read_unaligned()</code>, with the same safety …\nSimilar to <code>*const T::read_volatile()</code>, with the same safety …\nSimilar to <code>*mut T::read_volatile()</code>, with the same safety …\nReborrows the slices in a narrower lifetime\nReborrows the slices in a narrower lifetime\nSimilar to <code> Vec&lt;Particle&gt;  ::remove()</code>.\nSimilar to <code>std::mem::replace()</code>.\nSimilar to <code>std::mem::replace()</code>.\nSimilar to <code> Vec&lt;Particle&gt;  ::reserve()</code>, reserving the same …\nSimilar to <code> Vec&lt;Particle&gt;  ::reserve_exact()</code> reserving the …\nSimilar to <code> Vec&lt;Particle&gt;  ::retain()</code>.\nSimilar to <code> Vec&lt;Particle&gt;  ::retain_mut()</code>.\nSimilar to <code> Vec&lt;Particle&gt;  ::shrink_to_fit()</code> shrinking all …\nCreate a slice of this vector matching the given <code>range</code>. …\nCreate a mutable slice of this vector matching the given …\nSimilar to <code>&amp;mut [Particle]  ::sort()</code>.\nSimilar to <code>&amp;mut [Particle]  ::sort_by()</code>.\nSimilar to <code>&amp;mut [Particle]  ::sort_by_key()</code>.\nSimilar to <code>&amp; [Particle]  ::split_at()</code>.\nSimilar to <code>&amp;mut [Particle]  ::split_at_mut()</code>.\nSimilar to <code>&amp; [Particle]  ::split_first()</code>.\nSimilar to <code>&amp;mut [Particle] ::split_first_mut()</code>.\nSimilar to <code>&amp; [Particle]  ::split_last()</code>.\nSimilar to <code>&amp;mut [Particle]  ::last_mut()</code>.\nSimilar to <code> Vec&lt;Particle&gt;  ::split_off()</code>.\nSimilar to <code>*const T::sub()</code>, with the same safety caveats.\nSimilar to <code>*mut T::sub()</code>, with the same safety caveats.\nSimilar to <code>&amp;mut [Particle]  ::swap()</code>.\nSimilar to <code> Vec&lt;Particle&gt;  ::swap_remove()</code>.\nConvert a reference to <code>Particle</code> into an owned value. This …\nConvert a mutable reference to <code>Particle</code> into an owned …\nSimilar to <code> Vec&lt;Particle&gt;  ::truncate()</code> truncating all …\nSimilar to <code> Vec&lt;Particle&gt;  ::with_capacity()</code>, initializing …\nSimilar to <code>*const T::wrapping_add()</code>.\nSimilar to <code>*mut T::wrapping_add()</code>, with the same safety …\nSimilar to <code>*const T::offset()</code>.\nSimilar to <code>*mut T::wrapping_offset()</code>\nSimilar to <code>*const T::wrapping_sub()</code>.\nSimilar to <code>*mut T::wrapping_sub()</code>, with the same safety …\nSimilar to <code>*mut T::write()</code>, with the same safety caveats.\nSimilar to <code>*mut T::write_unaligned()</code>, with the same safety …\nSimilar to <code>*mut T::write_volatile()</code>, with the same safety …")